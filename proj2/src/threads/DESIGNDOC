1yoyo 	
                         +-----------------+
                         |     CSCI 350    |
                         |    Project 1    |
                         | DESIGN DOCUMENT |
                         +-----------------+

---- GROUP ----

Anthony Wittemann <awittema@usc.edu>
Kevin Bastoul <bastoul@usc.edu>

---- PRELIMINARIES ----


>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

We pulled the project the day it was released and began working. When a new version of the project was released we realized that the old version contained the correct implementations for some of alarm functions. Our approach to the alarm implementation was thus informed by the original version. We say this in case of similarities in approach. 

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* queue of sleeping threads */
struct list sleeping_thread_list;
// This list contains threads that have been put to sleep. It's where timer_interrupt check for threads
//that should be awoken.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

In timer_sleep, after interrupts are disabled, a thread goes into the waiting state (sleep/blocked) and is put onto a queue of waiting threads and then interrupts are reenabled. Interrupts are disabled so that the process of putting a thread to sleep and adding it to the queue is atomic. 

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

sleeping_thread_list is implemented as a priority queue, sorted by earliest wake time first. This way the threads that need to be awoken first are at the beginning of the queue. We break as soon as we get to the point in the queue where the threads don't need to be woken up anymore.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

We made the process of putting threads to sleep and adding them to the sleeping_thread_list atomic, so even if multiple threads call timer_sleep simultaneously, the execution of these processes will not be interleaved.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Interrupts are disabled for the time it takes to put a thread to sleep and add it to the sleeping_thread_list. This means that there will never be a case where a thread is not added to the sleeping list but goes to sleep.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

The use of a queue for sleeping threads avoids the previous need for a busy waiting while loop. Furthermore, the use of a priority queue saves time in the interrupt handler by allowing the handler to only check the top 
thread for wake up time rather than iterating through all of them. The placement of interrupt enables & disables avoids harmful context switches during thread_sleep & interrupt. 


             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

	__________ thread.h ______________
 
    int64_t wake_time; //how long the thread should sleep for until it is awoken
    
    int64_t donated_priority; //variable seperate from the original priority of the thread that may be changed in order to speed up its execution time so its lock can be released to a waiting thread of higher (original) priority
    
    bool has_donation; //tracks whether a thread has a donation for the purpose of deciding whether we should update donated priority in thread_set_priority function

    
    struct lock *wait_on_lock; //pointer to lock being waited on for nest donation

    struct list locks_held; //list of locks held by the thread

	___________ synch.h ________________    

	In struct lock we added: 
	//Worked with Justin in SAL OH on Thurs Sept 16 at 2:30
    //add lock list_elem so that threads can maintain list of locks they hold
    struct list_elem holding_elem;

    Moved struct semaphone_elem from synch.c to synch.h and added to it:
    uint64_t donated_priority; //copied from associated thread's priority so that we could sort the semaphore elements as a priority queue 



>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

See png file in repo

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

We implement a priority queue of sleeping/waiting threads sorted by priority and then call pop_front to remove the highest priority threads from the queue. This is done in both the semaphore.waiters list and the condition waiters list.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

We first check if the lock is held, and if the current thread has a higher donated priority than the lock holder, then we update the lock holder's donated priority to the current thread's. We then call nest_donate() which checks if the lock holder is waiting on any locks, if so it checks if there should be a donation to that lock holder.This process of checking lock holders for donation is repeated to a max depth of 8. 

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

Upon lock_release, the thread removes the lock from its list of locks held, then iterates through its remaining locks and updates its donated priority to the highest donated priority among the threads that are waiting on these locks. If there are no threads waiting, its donated priority is restored to its original priority.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

A potential race condition scenario could be thread 1 enters thread_set_priority, checks if the new priority is > thread 1's donated priority and then gets context switched out. Thread 2 then donates to thread 1, increasing its donated priority. Thread 2 is context switched out for thread 1 and thread 1's donated priority is set to new priority, even though its donated priority is now higher.

We avoid this scenario by making thread_set_priority atomic by disabling interrupts. We could have used a change priority lock which we also would have had to acquire whenever donating priority. This seems like a more complicated approach.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We originally stored the waiting threads in a list in the thread struct. We found this approach to be flawed because upon lock release it isn't always clear which threads need to be removed from the waiting threads list (because we don't know which threads are associated with the lock we just removed). Our new design is superior because it stores a list of the locks held by each thread and upon lock_release() it removes the lock from its list and only checks the waiters on the remaining locks it holds. This removes any ambiguity about which threads are still waiting on locks held by the current thread.


               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Struggling with locks/semaphores, esspecially the calls to block/unblock on threads, gave us a much better understanding of how threads are context switched and how to structure code so that they accomplish what we want them to before and after they are blocked. 

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
